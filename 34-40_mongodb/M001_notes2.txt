MongoDB holds information in dictionaries in BSON --> JSON called documents
Not SQL

Connecting to Atlas:

	mongo "mongodb+srv://sandbox.uualh.mongodb.net/myFirstDatabase" --username em

Switch to this database:

	use database_name

Prettification
	.pretty()

Count
	.count()

Find something

	db.(name of list dictionary).find({})
	.findOne()

Inserting
	.insert({})

Update
	.updateOne({1}, {2})
	.updateMany({1}, {2})
{1} is where to update (parameters for finding document to update)
{2} is how to update

**use {"$set":{}} or {"$inc":{}}

Logical operators
	$eq
	$gt
	$gte
	$lt
	$lte

Finding multiple in a document array
  { "item":
     { "$all": [ "v1", "v2", "v3" ] }

Specifying results (output)
	add , then
	, {"what you wanb" : 1, "waht you also want" : 1}
	0s can be used to exclude, 1 is include

Elem match
	matches at least one element in array
	db.grades.find({ "scores": { "$elemMatch": { "type": "extra credit" } }
               }).pretty()

Subdocuments
	"x.y.z.x1"
	for first element in array use 0" (use place in array)

Aggregrate
	multiple queries
	.aggregrate([{},{}])

Group
	where does document belong to?
	"_id": "$address.country"


--> Returns id and count of each country has
db.listingsAndReviews.aggregate([
                                  { "$project": { "address": 1, "_id": 0 }},
                                  { "$group": { "_id": "$address.country",
                                                "count": { "$sum": 1 } } }
                                ])

finds id and sort turns it into addresses
then coutns the ids in each address


limit(#) can limit the number of results to the first #

can sort with .sort() with certain fields
"pop": 1 increasing
"pop": -1 decreasing

indexes
createIndex({})
--> filters/sorts first

upserts (by default false)
find({},{"upsert":true})
inserts rather than updates if it not longer fits into query
conditional update
else probably dont use upsert